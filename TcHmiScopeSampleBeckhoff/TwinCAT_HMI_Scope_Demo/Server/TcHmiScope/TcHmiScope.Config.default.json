{
    "CHUNKSIZE": 1048576,
    "COMPRESSION": true,
    "TIMEOUT": "PT5S",
    "scopeConfigs": {
        "Scope": {
            "AUTOSTART_RECORD": true,
            "CONFIG_FILE": "",
            "CONFIG_PATH": "../TwinCAT Measurement Project1/YT Scope Project.tcscopex",
            "CONFIG_SOURCE": "project"
        }
    },
    "scopeRecords": []
}